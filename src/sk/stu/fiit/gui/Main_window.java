/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.agency.Agency;
import sk.stu.fiit.inputs.InputSanitizer;
import sk.stu.fiit.inputs.DemoInputs;
import sk.stu.fiit.agency.Employer;
import sk.stu.fiit.agency.Hire;
import sk.stu.fiit.specialists.Specialist;

/**
 *
 * @author PeterSmrecek
 */
public class Main_window extends javax.swing.JFrame {

    /**
     * Creates new form Main_window
     */
    public Main_window() {
        initComponents();
        
        updateAll();

    }
    
    private Agency agency = new Agency();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        desktopPane = new javax.swing.JDesktopPane();
        buttonPnl = new javax.swing.JPanel();
        addSpecBtn = new javax.swing.JButton();
        viewSpecBtn = new javax.swing.JButton();
        addEmpBtn = new javax.swing.JButton();
        showEmpBtn = new javax.swing.JButton();
        hireSpecBtn = new javax.swing.JButton();
        editHireBtn = new javax.swing.JButton();
        programmerScroll = new javax.swing.JScrollPane();
        programmerTbl = new javax.swing.JTable();
        employersScroll = new javax.swing.JScrollPane();
        employersTbl = new javax.swing.JTable();
        consultantScroll = new javax.swing.JScrollPane();
        consultantTbl = new javax.swing.JTable();
        adminScroll = new javax.swing.JScrollPane();
        adminTbl = new javax.swing.JTable();
        hiresScroll = new javax.swing.JScrollPane();
        hiresTbl = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        addSpecMi = new javax.swing.JMenuItem();
        viewSpecMi = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        addEmpMi = new javax.swing.JMenuItem();
        showEmpMi = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        hireSpecMi = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMi = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editHireMi = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        demoMi = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        hintMi = new javax.swing.JMenuItem();
        aboutMi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IT profesia");
        setLocationByPlatform(true);

        desktopPane.setLayout(new java.awt.GridBagLayout());

        buttonPnl.setBackground(new java.awt.Color(255, 255, 255));
        buttonPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ovládacie prvky", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        buttonPnl.setOpaque(false);
        buttonPnl.setLayout(new javax.swing.BoxLayout(buttonPnl, javax.swing.BoxLayout.LINE_AXIS));

        addSpecBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addSpecBtn.setText("Pridať špecialistu");
        addSpecBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addSpecBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(addSpecBtn);

        viewSpecBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewSpecBtn.setText("Zobraziť špecialistov");
        viewSpecBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                viewSpecBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(viewSpecBtn);

        addEmpBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addEmpBtn.setText("Pridať zamestnávateľa");
        addEmpBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addEmpBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(addEmpBtn);

        showEmpBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        showEmpBtn.setText("Zobraziť vybraného zamestnávateľa");
        showEmpBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showEmpBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(showEmpBtn);

        hireSpecBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hireSpecBtn.setText("Najať špecialistov");
        hireSpecBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                hireSpecBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(hireSpecBtn);

        editHireBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editHireBtn.setText("Upraviť prenájom");
        editHireBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editHireBtnMouseReleased(evt);
            }
        });
        buttonPnl.add(editHireBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 163;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 34, 0);
        desktopPane.add(buttonPnl, gridBagConstraints);

        programmerScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka programátorov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N
        programmerScroll.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        programmerTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        programmerTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Cena za deň", "Dĺžka praxe", "Vzdelanie", "Certifikáty", "Zamestnaný", "Najať"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        programmerTbl.getTableHeader().setReorderingAllowed(false);
        programmerScroll.setViewportView(programmerTbl);
        if (programmerTbl.getColumnModel().getColumnCount() > 0) {
            programmerTbl.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1227;
        gridBagConstraints.ipady = 101;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        desktopPane.add(programmerScroll, gridBagConstraints);

        employersScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka zamestnávateľov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N
        employersScroll.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        employersTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        employersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Názov", "Oblasť", "Počet zamestnancov", "Počet zamestnancov cez agentúru"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employersTbl.getTableHeader().setReorderingAllowed(false);
        employersScroll.setViewportView(employersTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 597;
        gridBagConstraints.ipady = 101;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        desktopPane.add(employersScroll, gridBagConstraints);

        consultantScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka konzultantov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N
        consultantScroll.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        consultantTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        consultantTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Cena za deň", "Dĺžka praxe", "Vzdelanie", "Certifikáty", "Zamestnaný", "Najať"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        consultantTbl.getTableHeader().setReorderingAllowed(false);
        consultantScroll.setViewportView(consultantTbl);
        if (consultantTbl.getColumnModel().getColumnCount() > 0) {
            consultantTbl.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1227;
        gridBagConstraints.ipady = 101;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        desktopPane.add(consultantScroll, gridBagConstraints);

        adminScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka administrátorov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N
        adminScroll.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        adminTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        adminTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno", "Cena za deň", "Dĺžka praxe", "Vzdelanie", "Certifikáty", "Zamestnaný", "Najať"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminTbl.getTableHeader().setReorderingAllowed(false);
        adminScroll.setViewportView(adminTbl);
        if (adminTbl.getColumnModel().getColumnCount() > 0) {
            adminTbl.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1227;
        gridBagConstraints.ipady = 101;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        desktopPane.add(adminScroll, gridBagConstraints);

        hiresScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabuľka prenájmov", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12))); // NOI18N
        hiresScroll.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        hiresTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        hiresTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Zemestnávateľ", "Počet zamestnancov v prenájme", "Dátum a čas poslednej úpravy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        hiresTbl.getTableHeader().setReorderingAllowed(false);
        hiresScroll.setViewportView(hiresTbl);
        if (hiresTbl.getColumnModel().getColumnCount() > 0) {
            hiresTbl.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 587;
        gridBagConstraints.ipady = 101;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 20);
        desktopPane.add(hiresScroll, gridBagConstraints);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Súbor");

        addSpecMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        addSpecMi.setMnemonic('o');
        addSpecMi.setText("Pridať špecialistu");
        addSpecMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSpecMiActionPerformed(evt);
            }
        });
        fileMenu.add(addSpecMi);

        viewSpecMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        viewSpecMi.setMnemonic('s');
        viewSpecMi.setText("Zobraziť špecialistov");
        viewSpecMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSpecMiActionPerformed(evt);
            }
        });
        fileMenu.add(viewSpecMi);
        fileMenu.add(jSeparator1);

        addEmpMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        addEmpMi.setMnemonic('a');
        addEmpMi.setText("Pridať zamestnávateľa");
        addEmpMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpMiActionPerformed(evt);
            }
        });
        fileMenu.add(addEmpMi);

        showEmpMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        showEmpMi.setText("Zobraziť vybraného zamestnávateľa");
        showEmpMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showEmpMiActionPerformed(evt);
            }
        });
        fileMenu.add(showEmpMi);
        fileMenu.add(jSeparator2);

        hireSpecMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        hireSpecMi.setText("Najať špecialistov");
        hireSpecMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hireSpecMiActionPerformed(evt);
            }
        });
        fileMenu.add(hireSpecMi);
        fileMenu.add(jSeparator3);

        exitMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMi.setMnemonic('x');
        exitMi.setText("Koniec");
        exitMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMiActionPerformed(evt);
            }
        });
        fileMenu.add(exitMi);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Úpravy");

        editHireMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        editHireMi.setMnemonic('t');
        editHireMi.setText("Upraviť prenájom");
        editHireMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHireMiActionPerformed(evt);
            }
        });
        editMenu.add(editHireMi);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Pomocník");

        demoMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        demoMi.setText("Vzorové vstupy");
        demoMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demoMiActionPerformed(evt);
            }
        });
        helpMenu.add(demoMi);
        helpMenu.add(jSeparator4);

        hintMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        hintMi.setMnemonic('c');
        hintMi.setText("Návod");
        hintMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintMiActionPerformed(evt);
            }
        });
        helpMenu.add(hintMi);

        aboutMi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        aboutMi.setMnemonic('a');
        aboutMi.setText("About");
        aboutMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMiActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMi);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1300, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMiActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMiActionPerformed

    private void addSpecMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSpecMiActionPerformed
        // TODO add your handling code here:
        addSpec();
    }//GEN-LAST:event_addSpecMiActionPerformed

    private void aboutMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMiActionPerformed
        // TODO add your handling code here:
        showAbout();
    }//GEN-LAST:event_aboutMiActionPerformed

    private void editHireMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHireMiActionPerformed
        // TODO add your handling code here:
        editHire();
    }//GEN-LAST:event_editHireMiActionPerformed

    private void hireSpecBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hireSpecBtnMouseReleased
        // TODO add your handling code here:
        hireSpecialists();
    }//GEN-LAST:event_hireSpecBtnMouseReleased

    private void viewSpecBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewSpecBtnMouseReleased
        // TODO add your handling code here:
        viewSpecialists();
    }//GEN-LAST:event_viewSpecBtnMouseReleased

    private void addEmpBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEmpBtnMouseReleased
        // TODO add your handling code here:
        addEmp();
    }//GEN-LAST:event_addEmpBtnMouseReleased

    private void showEmpBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showEmpBtnMouseReleased
        // TODO add your handling code here:
        showEmp();

    }//GEN-LAST:event_showEmpBtnMouseReleased

    private void editHireBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editHireBtnMouseReleased
        // TODO add your handling code here:
        editHire();
    }//GEN-LAST:event_editHireBtnMouseReleased

    private void addSpecBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addSpecBtnMouseReleased
        // TODO add your handling code here:
        addSpec();
    }//GEN-LAST:event_addSpecBtnMouseReleased

    private void viewSpecMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSpecMiActionPerformed
        // TODO add your handling code here:
        viewSpecialists();
    }//GEN-LAST:event_viewSpecMiActionPerformed

    private void addEmpMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpMiActionPerformed
        // TODO add your handling code here:
        addEmp();
    }//GEN-LAST:event_addEmpMiActionPerformed

    private void showEmpMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showEmpMiActionPerformed
        // TODO add your handling code here:
        showEmp();
    }//GEN-LAST:event_showEmpMiActionPerformed

    private void hireSpecMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hireSpecMiActionPerformed
        // TODO add your handling code here:
        hireSpecialists();
    }//GEN-LAST:event_hireSpecMiActionPerformed

    private void hintMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintMiActionPerformed
        // TODO add your handling code here:
        showHint();
    }//GEN-LAST:event_hintMiActionPerformed

    private void demoMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoMiActionPerformed
        // TODO add your handling code here:
        DemoInputs.demoSpecialists(agency);
        updateAll();
    }//GEN-LAST:event_demoMiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMi;
    private javax.swing.JButton addEmpBtn;
    private javax.swing.JMenuItem addEmpMi;
    private javax.swing.JButton addSpecBtn;
    private javax.swing.JMenuItem addSpecMi;
    private javax.swing.JScrollPane adminScroll;
    private javax.swing.JTable adminTbl;
    private javax.swing.JPanel buttonPnl;
    private javax.swing.JScrollPane consultantScroll;
    private javax.swing.JTable consultantTbl;
    private javax.swing.JMenuItem demoMi;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JButton editHireBtn;
    private javax.swing.JMenuItem editHireMi;
    private javax.swing.JMenu editMenu;
    private javax.swing.JScrollPane employersScroll;
    private javax.swing.JTable employersTbl;
    private javax.swing.JMenuItem exitMi;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem hintMi;
    private javax.swing.JButton hireSpecBtn;
    private javax.swing.JMenuItem hireSpecMi;
    private javax.swing.JScrollPane hiresScroll;
    private javax.swing.JTable hiresTbl;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane programmerScroll;
    private javax.swing.JTable programmerTbl;
    private javax.swing.JButton showEmpBtn;
    private javax.swing.JMenuItem showEmpMi;
    private javax.swing.JButton viewSpecBtn;
    private javax.swing.JMenuItem viewSpecMi;
    // End of variables declaration//GEN-END:variables

    public void updateAll() {
        populateTableOfSpecialists(programmerTbl, agency.getListProgrammers());
        populateTableOfSpecialists(consultantTbl, agency.getListConsultants());
        populateTableOfSpecialists(adminTbl, agency.getListAdministrators());
        populateTableOfHires(hiresTbl);
        populateTableOfEmployers(employersTbl);
    }
    
    public void hireSpecialists(){
        
        int employerTableIndex = getRow(employersTbl, "Nie je vybraný žiaden zamestnávateľ z tabuľky!");
        if (employerTableIndex == -1) {
            return;
        }
        
        Employer empToHire = agency.getEmployer(employerTableIndex);
        ArrayList<Specialist> specialistsToHire = new ArrayList<>();
        
        DefaultTableModel modelProgrammer = (DefaultTableModel) programmerTbl.getModel();
        for (int i = 0; i < modelProgrammer.getRowCount(); i++) {
            boolean selection = (boolean) modelProgrammer.getValueAt(i, 6);
            if (selection) {
                if (agency.getProgrammer(i).isHired()) {
                    JOptionPane.showMessageDialog(rootPane, 
                        "Nie je možné najať programátora " + agency.getProgrammer(i).getBasicInfo().getName() + " pretože už je najatý niekým iným!", 
                        "Chyba!", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    specialistsToHire.add(agency.getProgrammer(i));
                }
            }
        }
        
        DefaultTableModel modelConsultant = (DefaultTableModel) consultantTbl.getModel();
        for (int i = 0; i < modelConsultant.getRowCount(); i++) {
            boolean selection = (boolean) modelConsultant.getValueAt(i, 6);
            if (selection) {
                if (agency.getConsultant(i).isHired()) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Nie je možné najať konzultanta " + agency.getConsultant(i).getBasicInfo().getName() + " pretože už je najatý niekým iným!",
                            "Chyba!", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    specialistsToHire.add(agency.getConsultant(i));
                }
            }
        }
        
        DefaultTableModel modelAdministrator = (DefaultTableModel) adminTbl.getModel();
        for (int i = 0; i < modelAdministrator.getRowCount(); i++) {
            boolean selection = (boolean) modelAdministrator.getValueAt(i, 6);
            if (selection) {
                if (agency.getAdministrator(i).isHired()) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Nie je možné najať administrátora " + agency.getAdministrator(i).getBasicInfo().getName() + " pretože už je najatý niekým iným!",
                            "Chyba!", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    specialistsToHire.add(agency.getAdministrator(i));
                }
            } 
        }
        
        if (specialistsToHire.size() == 0) {
            JOptionPane.showMessageDialog(rootPane,
                    "Nie je možné najať nulový počet špecialistov!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        } else{
            agency.addHire(new Hire(specialistsToHire, empToHire));
        }
        
        
        
        
        updateAll();
    }
    
    public int getRow(JTable table, String message) {
        int index = table.getSelectedRow();

        if (InputSanitizer.isPositiveInt(index)) {
            return index;
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    message,
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
        }
        return -1;
    }
    
    public void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }

    public void populateTableOfSpecialists(JTable table, ArrayList<Specialist> list) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        deleteRows(model);

        int numberOfColumns = table.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        
        for (int i = 0; i < list.size(); i++) {
            
            rowData[0] = list.get(i).getBasicInfo().getName();
            rowData[1] = list.get(i).getBasicInfo().getMan_day().toString();
            rowData[2] = list.get(i).getBasicInfo().getLength_practise();
            rowData[3] = list.get(i).getBasicInfo().getEducation();
            rowData[4] = list.get(i).getBasicInfo().getCertificatesString();
            rowData[5] = list.get(i).isHiredText();
            rowData[6] = false;
            
            model.addRow(rowData);
            
        }
    }
    
    public void populateTableOfEmployers(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        deleteRows(model);

        int numberOfColumns = table.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Employer> list = agency.getListEmployers();
        
        for (int i = 0; i < list.size(); i++) {
            
            rowData[0] = list.get(i).getName();
            rowData[1] = list.get(i).getField();
            rowData[2] = list.get(i).getGivenNumberOfEmployees();
            rowData[3] = list.get(i).getAgencyNumberOfEmployees();
            
            model.addRow(rowData);
            
        }
    }
    
    public void populateTableOfHires(JTable table){
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        deleteRows(model);

        int numberOfColumns = table.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Hire> list = agency.getListHires();
        
        for (int i = 0; i < list.size(); i++) {
            
            rowData[0] = i + 1;
            rowData[1] = list.get(i).getEmployer().getName();
            rowData[2] = list.get(i).getNumberOfHired();
            rowData[3] = list.get(i).getDateString();
            
            model.addRow(rowData);
            
        }
    }

    public Agency getAgency() {
        return agency;
    }

    private void editHire() {
        int hireTableIndex = getRow(hiresTbl, "Nie je vybraný žiaden prenájom z tabuľky!");
        if (hireTableIndex == -1) {
            return;
        }
        
        Hire editHire = agency.getHire(hireTableIndex);
        
        EditHireWindow ehw = new EditHireWindow(this, editHire);
        ehw.setVisible(true);
    }

    private void viewSpecialists() {
        ViewSpecialistWindow vsw = new ViewSpecialistWindow(this);
        vsw.setVisible(true);
    }

    private void addSpec() {
        AddSpecialistWindow spw = new AddSpecialistWindow(this);
        spw.setVisible(true);
    }

    private void addEmp() {
        AddEmployerWindow aew = new AddEmployerWindow(this);
        aew.setVisible(true);
    }

    private void showAbout() {
        About about = new About();
        about.setVisible(true);
    }

    private void showEmp() {
        int employerTableIndex = getRow(employersTbl, "Nie je vybraný žiaden zamestnávateľ z tabuľky!");
        if (employerTableIndex == -1) {
            return;
        }

        Employer employer = agency.getEmployer(employerTableIndex);

        ShowEmployerWindow sew = new ShowEmployerWindow(employer);
        sew.setVisible(true);
    }

    private void showHint() {
        Hint hint = new Hint();
        hint.setVisible(true);
    }
    
}
