/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import sk.stu.fiit.agency.InputSanitizer;
import sk.stu.fiit.employers.Employer;
import sk.stu.fiit.specialists.Administrator;
import sk.stu.fiit.specialists.Consultant;
import sk.stu.fiit.specialists.Programmer;
import sk.stu.fiit.specialists.Specialist;
/**
 *
 * @author PeterSmrecek
 */
public class ViewSpecialistWindow extends javax.swing.JFrame {

    /**
     * Creates new form AddSpecialistWindow
     */
    
    Main_window main_window;
    ArrayList<Specialist> listOfSpecialists;
    ArrayList<String> listOfNames;
    
    public ViewSpecialistWindow(Main_window main_window) {
        initComponents();
        
        this.main_window = main_window;
        this.listOfSpecialists = main_window.getAgency().getAllSpecialist();
        
        listOfNames = getListOfNames(listOfSpecialists);
        
        atributesCb.setModel(new DefaultComboBoxModel<String>(listOfNames.toArray(new String[0])));
        
        platformLbl.setVisible(false);
        platformTf.setVisible(false);        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        typeBg = new javax.swing.ButtonGroup();
        addSpecialistPnl = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        mdLbl = new javax.swing.JLabel();
        practiseLbl = new javax.swing.JLabel();
        educationLbl = new javax.swing.JLabel();
        nameTf = new javax.swing.JTextField();
        mdTf = new javax.swing.JTextField();
        practiseTf = new javax.swing.JTextField();
        educationTf = new javax.swing.JTextField();
        atributesCb = new javax.swing.JComboBox<>();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        platformLbl = new javax.swing.JLabel();
        platformTf = new javax.swing.JTextField();
        certPnl = new javax.swing.JPanel();
        certScr = new javax.swing.JScrollPane();
        certTbl = new javax.swing.JTable();
        chooseLbl = new javax.swing.JLabel();
        fieldLbl = new javax.swing.JLabel();
        typeLbl = new javax.swing.JLabel();
        typeTf = new javax.swing.JTextField();
        fieldTf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Evidencia špecialistu");

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        addSpecialistPnl.setLayout(jPanel1Layout);

        titleLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Údaje špecialistu");
        titleLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        titleLbl.setPreferredSize(new java.awt.Dimension(450, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        addSpecialistPnl.add(titleLbl, gridBagConstraints);

        nameLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameLbl.setText("Meno");
        nameLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        nameLbl.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        addSpecialistPnl.add(nameLbl, gridBagConstraints);

        mdLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mdLbl.setText("Cena za deň");
        mdLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        mdLbl.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        addSpecialistPnl.add(mdLbl, gridBagConstraints);

        practiseLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        practiseLbl.setText("Dĺžka praxe");
        practiseLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        practiseLbl.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        addSpecialistPnl.add(practiseLbl, gridBagConstraints);

        educationLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        educationLbl.setText("Najvyššie dosiahnuté vzdelanie");
        educationLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        educationLbl.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        addSpecialistPnl.add(educationLbl, gridBagConstraints);

        nameTf.setEditable(false);
        nameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        addSpecialistPnl.add(nameTf, gridBagConstraints);

        mdTf.setEditable(false);
        mdTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mdTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        addSpecialistPnl.add(mdTf, gridBagConstraints);

        practiseTf.setEditable(false);
        practiseTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        practiseTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        addSpecialistPnl.add(practiseTf, gridBagConstraints);

        educationTf.setEditable(false);
        educationTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        educationTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        addSpecialistPnl.add(educationTf, gridBagConstraints);

        atributesCb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        atributesCb.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        addSpecialistPnl.add(atributesCb, gridBagConstraints);

        okBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        okBtn.setText("OK");
        okBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                okBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        addSpecialistPnl.add(okBtn, gridBagConstraints);

        cancelBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancelBtn.setText("Zrušiť");
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cancelBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 18;
        addSpecialistPnl.add(cancelBtn, gridBagConstraints);

        platformLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        platformLbl.setText("Preferovaná platforma");
        platformLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        addSpecialistPnl.add(platformLbl, gridBagConstraints);

        platformTf.setEditable(false);
        platformTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        platformTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        addSpecialistPnl.add(platformTf, gridBagConstraints);

        certPnl.setMinimumSize(new java.awt.Dimension(300, 120));
        certPnl.setPreferredSize(new java.awt.Dimension(300, 60));
        certPnl.setLayout(new java.awt.GridBagLayout());

        certScr.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        certScr.setMinimumSize(new java.awt.Dimension(270, 120));

        certTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Certifikáty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        certTbl.setMinimumSize(new java.awt.Dimension(150, 60));
        certTbl.getTableHeader().setReorderingAllowed(false);
        certScr.setViewportView(certTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        certPnl.add(certScr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        addSpecialistPnl.add(certPnl, gridBagConstraints);

        chooseLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chooseLbl.setText("Vyber špecialistu na zobrazenie");
        chooseLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        addSpecialistPnl.add(chooseLbl, gridBagConstraints);

        fieldLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fieldLbl.setText("Zaradenie");
        fieldLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        addSpecialistPnl.add(fieldLbl, gridBagConstraints);

        typeLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeLbl.setText("Typ špecialistu");
        typeLbl.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        addSpecialistPnl.add(typeLbl, gridBagConstraints);

        typeTf.setEditable(false);
        typeTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        addSpecialistPnl.add(typeTf, gridBagConstraints);

        fieldTf.setEditable(false);
        fieldTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fieldTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        addSpecialistPnl.add(fieldTf, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addSpecialistPnl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addSpecialistPnl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okBtnMouseReleased
        // TODO add your handling code here:
        
        showSpecialist();
    }//GEN-LAST:event_okBtnMouseReleased

    private void cancelBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseReleased
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelBtnMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSpecialistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSpecialistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSpecialistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSpecialistWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSpecialistWindow(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addSpecialistPnl;
    private javax.swing.JComboBox<String> atributesCb;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel certPnl;
    private javax.swing.JScrollPane certScr;
    private javax.swing.JTable certTbl;
    private javax.swing.JLabel chooseLbl;
    private javax.swing.JLabel educationLbl;
    private javax.swing.JTextField educationTf;
    private javax.swing.JLabel fieldLbl;
    private javax.swing.JTextField fieldTf;
    private javax.swing.JLabel mdLbl;
    private javax.swing.JTextField mdTf;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTf;
    private javax.swing.JButton okBtn;
    private javax.swing.JLabel platformLbl;
    private javax.swing.JTextField platformTf;
    private javax.swing.JLabel practiseLbl;
    private javax.swing.JTextField practiseTf;
    private javax.swing.JLabel titleLbl;
    private javax.swing.ButtonGroup typeBg;
    private javax.swing.JLabel typeLbl;
    private javax.swing.JTextField typeTf;
    // End of variables declaration//GEN-END:variables
    
    public void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }
    
    public void populateTableOfCertificates(ArrayList<String> certificates){
        DefaultTableModel model = (DefaultTableModel) certTbl.getModel();
        deleteRows(model);

        int numberOfColumns = certTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        
        for (int i = 0; i < certificates.size(); i++) {
            rowData[0] = certificates.get(i);
            model.addRow(rowData);
            
        }
    }
    
    private void showSpecialist() {
        String atribute = "";
        
        if (atributesCb.getSelectedItem() != null) {
            atribute = String.valueOf(atributesCb.getSelectedItem());
        }
        
        if (InputSanitizer.emptyString(atribute)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Výber nemôže byť prázdny!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int index = listOfNames.indexOf(atribute);
        
        if (!InputSanitizer.isPositiveInt(index)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Zlý výber!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Specialist specialist = listOfSpecialists.get(index);
        
        if (specialist instanceof Programmer) {
            platformLbl.setVisible(false);
            platformTf.setVisible(false);
            fieldLbl.setText("Zaradenie");
            
            typeTf.setText(specialist.getBasicInfo().getPosition());
            nameTf.setText(specialist.getBasicInfo().getName());
            mdTf.setText(specialist.getBasicInfo().getMan_day().toString());
            practiseTf.setText(specialist.getBasicInfo().getLength_practise());
            educationTf.setText(specialist.getBasicInfo().getEducation());
            fieldTf.setText(((Programmer) specialist).getField());
            populateTableOfCertificates(specialist.getBasicInfo().getCertificates());
        }
        
        if (specialist instanceof Consultant) {
            platformLbl.setVisible(false);
            platformTf.setVisible(false);
            fieldLbl.setText("Je audítor kybernetickej bezpečnosti NBU?");
            
            typeTf.setText(specialist.getBasicInfo().getPosition());
            nameTf.setText(specialist.getBasicInfo().getName());
            mdTf.setText(specialist.getBasicInfo().getMan_day().toString());
            practiseTf.setText(specialist.getBasicInfo().getLength_practise());
            educationTf.setText(specialist.getBasicInfo().getEducation());
            if (((Consultant) specialist).isAuditor_nbu()) {
                fieldTf.setText("Áno");
            } else{
                fieldTf.setText("Nie");
            }
            populateTableOfCertificates(specialist.getBasicInfo().getCertificates());
        }
        
        if (specialist instanceof Administrator) {
            platformLbl.setVisible(true);
            platformTf.setVisible(true);
            fieldLbl.setText("Zaradenie");
            
            typeTf.setText(specialist.getBasicInfo().getPosition());
            nameTf.setText(specialist.getBasicInfo().getName());
            mdTf.setText(specialist.getBasicInfo().getMan_day().toString());
            practiseTf.setText(specialist.getBasicInfo().getLength_practise());
            educationTf.setText(specialist.getBasicInfo().getEducation());
            fieldTf.setText(((Administrator) specialist).getType());
            platformTf.setText(((Administrator) specialist).getPlatform());
            populateTableOfCertificates(specialist.getBasicInfo().getCertificates());
        }
    }

    private ArrayList<String> getListOfNames(ArrayList<Specialist> listOfSpecialists) {
        ArrayList<String> listOfNames = new ArrayList<>();
        
        for (Specialist specialist : listOfSpecialists) {
            listOfNames.add(specialist.getBasicInfo().getName());
        }
        
        return listOfNames;
    }

}
